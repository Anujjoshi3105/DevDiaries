// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?   @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  stories  Story[]
  comments Comment[]
  claps    Clap[]
  saves    Save[]
  topics   Topics?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Story {
  id        String   @id @default(dbgenerated("concat('story_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  authorId  String
  content   String?
  topics    String[]
  publish   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  claps    Clap[]
  comments Comment[]
  saves    Save[]
}

model Comment {
  id              String   @id @default(dbgenerated("concat('comment_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  content         String
  createdAt       DateTime @default(now())
  userId          String
  storyId         String
  parentCommentId String?

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  story         Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentToComment")
  claps         Clap[]
}

model Clap {
  id        String  @id @default(dbgenerated("concat('clap_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId    String
  storyId   String
  commentId String?
  clapCount Int     @default(0)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  story   Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Save {
  id        String   @id @default(dbgenerated("concat('save_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  createdAt DateTime @default(now())
  userId    String
  storyId   String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Following {
  id          String @id @default(dbgenerated("concat('following_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  followerId  String
  followingId String
}

model Topics {
  id             String   @id @default(dbgenerated("concat('topics_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId         String   @unique
  selectedTopics String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
