generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String   @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bio        String?
  profession String?
  accounts   Account[]
  blogs      Blog[]
  comments   Comment[]
  likes      Like[]
  saves      Save[]
  followers  Following[] @relation("UserFollowers")
  following  Following[] @relation("UserFollowings")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Blog {
  id        String   @id @default(dbgenerated("concat('blog_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  authorId  String
  title     String?
  content   String?
  topics    String[]
  image     String?
  publish   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  views    Int       @default(0)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
  saves    Save[]
}

model Comment {
  id              String   @id @default(dbgenerated("concat('comment_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  content         String
  createdAt       DateTime @default(now())
  userId          String
  blogId          String
  parentCommentId String?

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog          Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentToComment")
  likes         Like[]
}

model Like {
  id        String  @id @default(dbgenerated("concat('like_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  userId    String
  blogId    String
  commentId String?
  likeCount Int     @default(0)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog    Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Save {
  id        String   @id @default(dbgenerated("concat('save_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  createdAt DateTime @default(now())
  userId    String
  blogId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Following {
  id          String @id @default(dbgenerated("concat('following_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}
